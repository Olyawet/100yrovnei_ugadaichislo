// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let gameData = {
    nickname: '',
    totalScore: 0,
    gamesPlayed: 0,
    completedLevels: 0,
    currentLevel: 1,
    levelScores: {},
    levelRecords: {},
    achievements: {
        firstWin: false,
        level10: false,
        level25: false,
        level50: false,
        level75: false,
        level100: false,
        perfectScore: false,
        speedRunner: false
    }
};

let currentGame = {
    level: 1,
    targetNumber: 0,
    attempts: 0,
    maxAttempts: 15,
    range: { min: 1, max: 15 },
    guesses: [],
    gameActive: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', function() {
    loadGameData();
    checkNickname();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∏–∫–∞
function checkNickname() {
    if (!gameData.nickname) {
        showNicknameModal();
    } else {
        initializeGame();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
function showNicknameModal() {
    document.getElementById('nickname-modal').style.display = 'block';
    document.getElementById('nickname-input').focus();
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏–∫
function saveNickname() {
    const nicknameInput = document.getElementById('nickname-input');
    const nickname = nicknameInput.value.trim();
    
    if (nickname.length < 3) {
        alert('–ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞!');
        return;
    }
    
    if (nickname.length > 15) {
        alert('–ù–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∏–∫–∞
    const savedData = localStorage.getItem(`guessNumberGame_${nickname}`);
    if (savedData) {
        try {
            const parsedData = JSON.parse(savedData);
            if (confirm(`–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç "${nickname}". –•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –Ω–µ–≥–æ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å?`)) {
                gameData = parsedData;
                saveGameData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
                document.getElementById('nickname-modal').style.display = 'none';
                initializeGame();
                return;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞:', e);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
    const leaderboard = getLeaderboard();
    const existingPlayer = leaderboard.find(player => player.nickname.toLowerCase() === nickname.toLowerCase());
    
    if (existingPlayer && existingPlayer.nickname !== gameData.nickname) {
        alert('–≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.');
        return;
    }
    
    gameData.nickname = nickname;
    saveGameData();
    document.getElementById('nickname-modal').style.display = 'none';
    initializeGame();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
function initializeGame() {
    generateLevels();
    updateUI();
    setupEventListeners();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadGameData() {
    const saved = localStorage.getItem('guessNumberGame');
    if (saved) {
        try {
            const parsed = JSON.parse(saved);
            gameData = { ...gameData, ...parsed };
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveGameData() {
    try {
        localStorage.setItem('guessNumberGame', JSON.stringify(gameData));
        updateLeaderboard();
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
function getLeaderboard() {
    const saved = localStorage.getItem('guessNumberLeaderboard');
    if (saved) {
        try {
            return JSON.parse(saved);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', e);
        }
    }
    return [];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
function updateLeaderboard() {
    const leaderboard = getLeaderboard();
    const playerIndex = leaderboard.findIndex(player => player.nickname === gameData.nickname);
    
    const playerData = {
        nickname: gameData.nickname,
        totalScore: gameData.totalScore,
        completedLevels: gameData.completedLevels,
        gamesPlayed: gameData.gamesPlayed,
        lastUpdated: new Date().toISOString()
    };
    
    if (playerIndex >= 0) {
        leaderboard[playerIndex] = playerData;
    } else {
        leaderboard.push(playerData);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É (—É–±—ã–≤–∞–Ω–∏–µ), –∑–∞—Ç–µ–º –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω—è–º
    leaderboard.sort((a, b) => {
        if (b.totalScore !== a.totalScore) {
            return b.totalScore - a.totalScore;
        }
        return b.completedLevels - a.completedLevels;
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ —Ç–æ–ø-50 –∏–≥—Ä–æ–∫–æ–≤
    const topPlayers = leaderboard.slice(0, 50);
    
    try {
        localStorage.setItem('guessNumberLeaderboard', JSON.stringify(topPlayers));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', e);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π
function generateLevels() {
    const container = document.getElementById('levels-container');
    container.innerHTML = '';

    for (let i = 1; i <= 100; i++) {
        const levelCard = createLevelCard(i);
        container.appendChild(levelCard);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–≤–Ω—è
function createLevelCard(level) {
    const card = document.createElement('div');
    card.className = 'level-card';
    card.onclick = () => startLevel(level);

    const difficulty = getDifficulty(level);
    const range = getLevelRange(level);
    const attempts = getLevelAttempts(level);

    let status = 'locked';
    if (level <= gameData.currentLevel) {
        status = level === gameData.currentLevel ? 'current' : 'completed';
    }

    card.classList.add(status);

    const score = gameData.levelScores[level] || 0;
    const record = gameData.levelRecords[level] || null;

    card.innerHTML = `
        <h3>–£—Ä–æ–≤–µ–Ω—å ${level}</h3>
        <p>1-${range.max}</p>
        <p>${attempts} –ø–æ–ø—ã—Ç–æ–∫</p>
        <p class="score">${score > 0 ? score + ' –æ—á–∫–æ–≤' : '–ù–µ –ø—Ä–æ–π–¥–µ–Ω'}</p>
        ${record ? `<p>üèÜ ${record} –æ—á–∫–æ–≤</p>` : ''}
        <span class="difficulty ${difficulty.class}">${difficulty.name}</span>
    `;

    return card;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
function getDifficulty(level) {
    if (level <= 20) return { name: '–ù–æ–≤–∏—á–æ–∫', class: 'novice' };
    if (level <= 40) return { name: '–£—á–µ–Ω–∏–∫', class: 'apprentice' };
    if (level <= 60) return { name: '–ú–∞—Å—Ç–µ—Ä', class: 'master' };
    if (level <= 80) return { name: '–≠–∫—Å–ø–µ—Ä—Ç', class: 'expert' };
    return { name: '–õ–µ–≥–µ–Ω–¥–∞', class: 'legend' };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è
function getLevelRange(level) {
    if (level <= 20) {
        return { min: 1, max: 10 + level * 5 };
    } else if (level <= 40) {
        return { min: 1, max: 100 + (level - 20) * 6 };
    } else if (level <= 60) {
        return { min: 1, max: 200 + (level - 40) * 7.5 };
    } else if (level <= 80) {
        return { min: 1, max: 350 + (level - 60) * 7.5 };
    } else {
        return { min: 1, max: 500 + (level - 80) * 10 };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É—Ä–æ–≤–Ω—è
function getLevelAttempts(level) {
    if (level <= 20) {
        return Math.max(13, 15 - Math.floor(level / 5));
    } else if (level <= 40) {
        return Math.max(10, 12 - Math.floor((level - 20) / 5));
    } else if (level <= 60) {
        return Math.max(7, 9 - Math.floor((level - 40) / 5));
    } else if (level <= 80) {
        return Math.max(4, 6 - Math.floor((level - 60) / 5));
    } else {
        return Math.max(2, 3 - Math.floor((level - 80) / 5));
    }
}

// –ù–∞—á–∞–ª–æ —É—Ä–æ–≤–Ω—è
function startLevel(level) {
    if (level > gameData.currentLevel) {
        alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å!');
        return;
    }

    currentGame.level = level;
    currentGame.range = getLevelRange(level);
    currentGame.maxAttempts = getLevelAttempts(level);
    currentGame.attempts = 0;
    currentGame.guesses = [];
    currentGame.gameActive = true;
    currentGame.targetNumber = Math.floor(Math.random() * currentGame.range.max) + 1;

    updateGameUI();
    showGameModal();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateGameUI() {
    document.getElementById('game-title').textContent = `üéØ –£—Ä–æ–≤–µ–Ω—å ${currentGame.level}`;
    document.getElementById('attempts-left').textContent = currentGame.maxAttempts - currentGame.attempts;
    document.getElementById('range').textContent = `${currentGame.range.min}-${currentGame.range.max}`;
    
    const bestScore = gameData.levelRecords[currentGame.level] || '–ù–µ—Ç';
    document.getElementById('best-score').textContent = bestScore === '–ù–µ—Ç' ? '–ù–µ—Ç' : bestScore + ' –æ—á–∫–æ–≤';
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ–≥–∞–¥–æ–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if (currentGame.attempts === 0) {
        document.getElementById('guess-history').innerHTML = '<p style="color: #666; text-align: center; font-style: italic;">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–≥–∞–¥–æ–∫</p>';
    }
    
    document.getElementById('guess-input').value = '';
    document.getElementById('guess-input').focus();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showGameModal() {
    document.getElementById('game-modal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeGameModal() {
    document.getElementById('game-modal').style.display = 'none';
    currentGame.gameActive = false;
}

// –°–¥–µ–ª–∞—Ç—å –¥–æ–≥–∞–¥–∫—É
function makeGuess() {
    if (!currentGame.gameActive) return;

    const input = document.getElementById('guess-input');
    const guessValue = input.value.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    if (!/^\d+$/.test(guessValue)) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π!');
        return;
    }
    
    const guess = parseInt(guessValue);

    if (isNaN(guess) || guess < currentGame.range.min || guess > currentGame.range.max) {
        alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç ${currentGame.range.min} –¥–æ ${currentGame.range.max}!`);
        return;
    }

    currentGame.attempts++;
    const result = checkGuess(guess);
    addGuessToHistory(guess, result);

    if (result === 'correct') {
        endGame(true);
    } else if (currentGame.attempts >= currentGame.maxAttempts) {
        endGame(false);
    }

    input.value = '';
    input.focus();
    updateGameUI();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–∞–¥–∫–∏
function checkGuess(guess) {
    if (guess === currentGame.targetNumber) {
        return 'correct';
    } else if (guess < currentGame.targetNumber) {
        return 'higher';
    } else {
        return 'lower';
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–∞–¥–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
function addGuessToHistory(guess, result) {
    const history = document.getElementById('guess-history');
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–≥–∞–¥–æ–∫" –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –¥–æ–≥–∞–¥–∫–µ
    if (currentGame.attempts === 1) {
        history.innerHTML = '';
    }
    
    const guessItem = document.createElement('div');
    guessItem.className = `guess-item ${result}`;

    let message = '';
    switch (result) {
        case 'correct':
            message = `üéâ ${guess} - –ü—Ä–∞–≤–∏–ª—å–Ω–æ!`;
            break;
        case 'higher':
            message = `üìà ${guess} - –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ`;
            break;
        case 'lower':
            message = `üìâ ${guess} - –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ`;
            break;
    }

    guessItem.textContent = message;
    history.appendChild(guessItem);
    history.scrollTop = history.scrollHeight;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function endGame(won) {
    currentGame.gameActive = false;
    
    if (won) {
        const score = calculateScore();
        const wasNewRecord = updateLevelRecord(score);
        
        gameData.totalScore += score;
        gameData.gamesPlayed++;
        gameData.levelScores[currentGame.level] = score;
        
        if (currentGame.level === gameData.currentLevel) {
            gameData.completedLevels++;
            gameData.currentLevel++;
            checkAchievements();
        }

        saveGameData();
        updateUI();
        
        setTimeout(() => {
            if (wasNewRecord) {
                alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å ${currentGame.level}!\nüèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: ${score} –æ—á–∫–æ–≤!`);
            } else {
                alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å ${currentGame.level}!\nüíØ –û—á–∫–∏: ${score}`);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤–º–µ—Å—Ç–æ confirm
            showNextLevelButton();
        }, 500);
    } else {
        alert(`üòî –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: ${currentGame.targetNumber}`);
        closeGameModal();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
function showNextLevelButton() {
    const gameModal = document.getElementById('game-modal');
    const navButtons = gameModal.querySelector('.nav-buttons');
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    navButtons.innerHTML = '';
    
    if (currentGame.level < 100) {
        const nextButton = document.createElement('button');
        nextButton.className = 'next-level-button';
        nextButton.textContent = 'üéØ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å';
        nextButton.onclick = () => {
            closeGameModal();
            startLevel(currentGame.level + 1);
        };
        navButtons.appendChild(nextButton);
    }
    
    const homeButton = document.createElement('button');
    homeButton.className = 'nav-button';
    homeButton.textContent = 'üè† –ì–ª–∞–≤–Ω–∞—è';
    homeButton.onclick = closeGameModal;
    navButtons.appendChild(homeButton);
    
    const statsButton = document.createElement('button');
    statsButton.className = 'nav-button';
    statsButton.textContent = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';
    statsButton.onclick = showStatistics;
    navButtons.appendChild(statsButton);
}

// –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤
function calculateScore() {
    const remainingAttempts = currentGame.maxAttempts - currentGame.attempts;
    return (remainingAttempts * 10) + (currentGame.level * 5);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞ —É—Ä–æ–≤–Ω—è
function updateLevelRecord(score) {
    const currentRecord = gameData.levelRecords[currentGame.level] || 0;
    if (score > currentRecord) {
        gameData.levelRecords[currentGame.level] = score;
        return true;
    }
    return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    const achievements = gameData.achievements;
    
    if (!achievements.firstWin && gameData.completedLevels >= 1) {
        achievements.firstWin = true;
        showAchievement('üéØ –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', '–í—ã –ø—Ä–æ—à–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!');
    }
    
    if (!achievements.level10 && gameData.completedLevels >= 10) {
        achievements.level10 = true;
        showAchievement('üåü –î–µ—Å—è—Ç–∫–∞', '–í—ã –ø—Ä–æ—à–ª–∏ 10 —É—Ä–æ–≤–Ω–µ–π!');
    }
    
    if (!achievements.level25 && gameData.completedLevels >= 25) {
        achievements.level25 = true;
        showAchievement('‚≠ê –ö–≤–∞—Ä—Ç–∞–ª', '–í—ã –ø—Ä–æ—à–ª–∏ 25 —É—Ä–æ–≤–Ω–µ–π!');
    }
    
    if (!achievements.level50 && gameData.completedLevels >= 50) {
        achievements.level50 = true;
        showAchievement('üíé –ü–æ–ª–æ–≤–∏–Ω–∞', '–í—ã –ø—Ä–æ—à–ª–∏ 50 —É—Ä–æ–≤–Ω–µ–π!');
    }
    
    if (!achievements.level75 && gameData.completedLevels >= 75) {
        achievements.level75 = true;
        showAchievement('üëë –¢—Ä–∏ —á–µ—Ç–≤–µ—Ä—Ç–∏', '–í—ã –ø—Ä–æ—à–ª–∏ 75 —É—Ä–æ–≤–Ω–µ–π!');
    }
    
    if (!achievements.level100 && gameData.completedLevels >= 100) {
        achievements.level100 = true;
        showAchievement('üèÜ –õ–µ–≥–µ–Ω–¥–∞', '–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ 100 —É—Ä–æ–≤–Ω–µ–π!');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
function showAchievement(title, description) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        z-index: 10000;
        animation: slideIn 0.5s ease;
        max-width: 300px;
    `;
    
    notification.innerHTML = `
        <h4 style="margin: 0 0 5px 0;">${title}</h4>
        <p style="margin: 0; font-size: 0.9rem;">${description}</p>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.5s ease';
        setTimeout(() => notification.remove(), 500);
    }, 3000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('total-score').textContent = gameData.totalScore;
    document.getElementById('games-played').textContent = gameData.gamesPlayed;
    document.getElementById('progress').textContent = `${gameData.completedLevels}/100`;
    
    const progressPercent = (gameData.completedLevels / 100) * 100;
    document.getElementById('progress-fill').style.width = progressPercent + '%';
    document.getElementById('progress-text').textContent = 
        `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${gameData.completedLevels}/100 —É—Ä–æ–≤–Ω–µ–π (${progressPercent.toFixed(1)}%)`;
    
    generateLevels(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–≤–Ω–µ–π
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function showStatistics() {
    const content = document.getElementById('statistics-content');
    
    const totalLevels = Object.keys(gameData.levelScores).length;
    const averageScore = totalLevels > 0 ? Math.round(gameData.totalScore / totalLevels) : 0;
    const bestLevel = Object.entries(gameData.levelRecords)
        .reduce((best, [level, score]) => score > best.score ? { level, score } : best, { level: 0, score: 0 });
    
    content.innerHTML = `
        <div class="stats-grid">
            <div class="stat-item">
                <h3>–ò–≥—Ä–æ–∫</h3>
                <p>${gameData.nickname}</p>
            </div>
            <div class="stat-item">
                <h3>–û–±—â–∏–π —Å—á–µ—Ç</h3>
                <p>${gameData.totalScore}</p>
            </div>
            <div class="stat-item">
                <h3>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ</h3>
                <p>${gameData.gamesPlayed}</p>
            </div>
            <div class="stat-item">
                <h3>–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π</h3>
                <p>${gameData.completedLevels}/100</p>
            </div>
            <div class="stat-item">
                <h3>–°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç</h3>
                <p>${averageScore}</p>
            </div>
            <div class="stat-item">
                <h3>–õ—É—á—à–∏–π —É—Ä–æ–≤–µ–Ω—å</h3>
                <p>${bestLevel.level > 0 ? `–£—Ä–æ–≤–µ–Ω—å ${bestLevel.level} (${bestLevel.score} –æ—á–∫–æ–≤)` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
            </div>
        </div>
        
        <div class="achievements">
            <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
            ${generateAchievementsList()}
        </div>
        
        <div class="account-actions">
            <button class="logout-button" onclick="logoutAccount()">üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</button>
        </div>
    `;
    
    document.getElementById('statistics-modal').style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
function showLeaderboard() {
    const content = document.getElementById('leaderboard-content');
    const leaderboard = getLeaderboard();
    
    const currentPlayerRank = leaderboard.findIndex(player => player.nickname === gameData.nickname) + 1;
    const totalPlayers = leaderboard.length;
    
    let leaderboardHTML = `
        <div class="leaderboard-stats">
            <div class="leaderboard-stat">
                <h3>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤</h3>
                <p>${totalPlayers}</p>
            </div>
            <div class="leaderboard-stat">
                <h3>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è</h3>
                <p>${currentPlayerRank > 0 ? currentPlayerRank : '–ù–µ –≤ —Ç–æ–ø–µ'}</p>
            </div>
            <div class="leaderboard-stat">
                <h3>–í–∞—à —Å—á–µ—Ç</h3>
                <p>${gameData.totalScore}</p>
            </div>
        </div>
    `;
    
    if (leaderboard.length > 0) {
        leaderboardHTML += `
            <table class="leaderboard-table">
                <thead>
                    <tr>
                        <th>–ú–µ—Å—Ç–æ</th>
                        <th>–ò–≥—Ä–æ–∫</th>
                        <th>–°—á–µ—Ç</th>
                        <th>–£—Ä–æ–≤–Ω–∏</th>
                        <th>–ò–≥—Ä</th>
                    </tr>
                </thead>
                <tbody>
        `;
        
        leaderboard.forEach((player, index) => {
            const rank = index + 1;
            const rankClass = rank <= 3 ? `rank-${rank}` : '';
            const isCurrentPlayer = player.nickname === gameData.nickname;
            const rowClass = isCurrentPlayer ? 'current-player' : '';
            
            leaderboardHTML += `
                <tr class="${rowClass}">
                    <td class="rank ${rankClass}">${rank}</td>
                    <td>${player.nickname}${isCurrentPlayer ? ' (–í—ã)' : ''}</td>
                    <td>${player.totalScore}</td>
                    <td>${player.completedLevels}/100</td>
                    <td>${player.gamesPlayed}</td>
                </tr>
            `;
        });
        
        leaderboardHTML += `
                </tbody>
            </table>
        `;
    } else {
        leaderboardHTML += '<p style="text-align: center; color: #666;">–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤</p>';
    }
    
    content.innerHTML = leaderboardHTML;
    document.getElementById('leaderboard-modal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
function closeLeaderboardModal() {
    document.getElementById('leaderboard-modal').style.display = 'none';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function generateAchievementsList() {
    const achievements = [
        { id: 'firstWin', title: 'üéØ –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', description: '–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å', icon: 'üéØ' },
        { id: 'level10', title: 'üåü –î–µ—Å—è—Ç–∫–∞', description: '–ü—Ä–æ–π–¥–∏—Ç–µ 10 —É—Ä–æ–≤–Ω–µ–π', icon: 'üåü' },
        { id: 'level25', title: '‚≠ê –ö–≤–∞—Ä—Ç–∞–ª', description: '–ü—Ä–æ–π–¥–∏—Ç–µ 25 —É—Ä–æ–≤–Ω–µ–π', icon: '‚≠ê' },
        { id: 'level50', title: 'üíé –ü–æ–ª–æ–≤–∏–Ω–∞', description: '–ü—Ä–æ–π–¥–∏—Ç–µ 50 —É—Ä–æ–≤–Ω–µ–π', icon: 'üíé' },
        { id: 'level75', title: 'üëë –¢—Ä–∏ —á–µ—Ç–≤–µ—Ä—Ç–∏', description: '–ü—Ä–æ–π–¥–∏—Ç–µ 75 —É—Ä–æ–≤–Ω–µ–π', icon: 'üëë' },
        { id: 'level100', title: 'üèÜ –õ–µ–≥–µ–Ω–¥–∞', description: '–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ 100 —É—Ä–æ–≤–Ω–µ–π', icon: 'üèÜ' }
    ];
    
    return achievements.map(achievement => {
        const unlocked = gameData.achievements[achievement.id];
        return `
            <div class="achievement ${unlocked ? 'unlocked' : 'locked'}">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-text">
                    <h4>${achievement.title}</h4>
                    <p>${achievement.description}</p>
                </div>
            </div>
        `;
    }).join('');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function closeStatisticsModal() {
    document.getElementById('statistics-modal').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞
function showRules() {
    document.getElementById('rules-modal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∞–≤–∏–ª
function closeRulesModal() {
    document.getElementById('rules-modal').style.display = 'none';
}

// –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function resetProgress() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        gameData = {
            nickname: gameData.nickname, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫
            totalScore: 0,
            gamesPlayed: 0,
            completedLevels: 0,
            currentLevel: 1,
            levelScores: {},
            levelRecords: {},
            achievements: {
                firstWin: false,
                level10: false,
                level25: false,
                level50: false,
                level75: false,
                level100: false,
                perfectScore: false,
                speedRunner: false
            }
        };
        
        localStorage.removeItem('guessNumberGame');
        updateUI();
        alert('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–æ–≥–∞–¥–∫–∏
    document.getElementById('guess-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            makeGuess();
        }
    });
    
    // Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
    document.getElementById('nickname-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            saveNickname();
        }
    });
    
    // –ó–∞–ø—Ä–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    document.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –ó–∞–ø—Ä–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    document.addEventListener('copy', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –ó–∞–ø—Ä–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
    document.addEventListener('selectstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –ó–∞–ø—Ä–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    document.addEventListener('dragstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –ó–∞–ø—Ä–µ—Ç –∫–ª–∞–≤–∏—à–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    document.addEventListener('keydown', function(e) {
        // Ctrl+C, Ctrl+V, Ctrl+X, Ctrl+A, Ctrl+Z, Ctrl+Y, F12
        if ((e.ctrlKey && (e.key === 'c' || e.key === 'v' || e.key === 'x' || e.key === 'a' || e.key === 'z' || e.key === 'y')) || 
            e.key === 'F12' || 
            (e.ctrlKey && e.shiftKey && e.key === 'I') || // Ctrl+Shift+I
            (e.ctrlKey && e.shiftKey && e.key === 'J') || // Ctrl+Shift+J
            (e.ctrlKey && e.shiftKey && e.key === 'C')) { // Ctrl+Shift+C
            e.preventDefault();
            return false;
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(e) {
        const gameModal = document.getElementById('game-modal');
        const statsModal = document.getElementById('statistics-modal');
        const rulesModal = document.getElementById('rules-modal');
        const leaderboardModal = document.getElementById('leaderboard-modal');
        const nicknameModal = document.getElementById('nickname-modal');
        
        if (e.target === gameModal) {
            closeGameModal();
        }
        if (e.target === statsModal) {
            closeStatisticsModal();
        }
        if (e.target === rulesModal) {
            closeRulesModal();
        }
        if (e.target === leaderboardModal) {
            closeLeaderboardModal();
        }
        if (e.target === nicknameModal) {
            // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∏–∫–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        }
    });
}

// CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
function logoutAccount() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –ø–æ–¥ –¥—Ä—É–≥–∏–º –Ω–∏–∫–æ–º.')) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage —Å –Ω–∏–∫–æ–º
        const currentData = { ...gameData };
        localStorage.setItem(`guessNumberGame_${gameData.nickname}`, JSON.stringify(currentData));
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        gameData = {
            nickname: '',
            totalScore: 0,
            gamesPlayed: 0,
            completedLevels: 0,
            currentLevel: 1,
            levelScores: {},
            levelRecords: {},
            achievements: {
                firstWin: false,
                level10: false,
                level25: false,
                level50: false,
                level75: false,
                level100: false,
                perfectScore: false,
                speedRunner: false
            }
        };
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        localStorage.removeItem('guessNumberGame');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        closeStatisticsModal();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–∞
        showNicknameModal();
    }
} 